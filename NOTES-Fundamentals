import { Component } from '@angular/core';
import { Routes, ActivatedRoute } from '@angular/router';
Commands
1.npx npm install -g @angular/cli
2.npx ng new appname
3.npx ng generate pipe Pipes/append --->creates pipe for appending in  pipes folder 
4.npx ng generate service folder/serviceName
5.npx npm install -g json-server
      json-server --watch file.json --port 1111
6.npx ng generate component folder/comp name
7.npx ng new firstapp --standalone=false
8.npx ng new appname --no-standalone






-------------------------------------------------------
Angular 16
built by google
SPA-single page application



Data binding (interpolation)
1.oneway  (interpolation) =={{}}
2.twoway   [(ngmodel)]== interpolation

1.oneway  (interpolation) =={{}}
--------------------------------------
export class AppComponent {
  title:string="bob";
  imagevar:string="url of image"
  bgcolor:string="blue";
  counter:number=0;

  //eventbinding
incrementCounter(){
  this.counter++;
}

}
-------
html
-------

<h1>{{title}}</h1>

//Attribute binding
<img [src]="imagevar"/>

//style binding
<h1 [style.backgroundColor]="bgcolor">

//eventbinding
{{counter}}
<button (click)="incrememtCounter"></button>


---------------------------------------
Two way Data binding
[(ngmodel)]=""

1.import FORMMODULE in appmodule.this

2.AppComponent
  inputText:string="hello";

3.AppComponent.html
  <input type="text" [(ngModel)]="inputText"/>
   <h1>{{inputText}}</h1>

   ------------------------------------------------
   Structure Directives

   ngif ,ngfor ,ng switch

   export class AppComponent {
   userName:string="Stark"
  isloggedin:boolean=true;
  grade:string="B"
  names:string[]=["abc","bcd","efg"];

   }

   
<!-- ngif -->
<h1 *ngIf="isloggedin">welcome {{userName}}</h1>
<h1 *ngIf="!isloggedin">click to login</h1> -->


<!-- ng-if with else -->
<h1 *ngIf="isloggedin; else loggedout" >welcome {{userName}}</h1>
<ng-template #loggedout>login</ng-template> -->

<!-- Switch
<div  [ngSwitch]="grade">
  <h1 *ngSwitchCase="'A'">Excellent</h1>
  <h1 *ngSwitchCase="'B'"> good</h1>
  <h1 *ngSwitchCase="'C'">nice</h1>
</div> -->

  <!-- ng-for -->
  <div *ngFor="let i of names">
  <h1>{{i}}</h1>
  </div> -->

  -------------------------------------------------------------------------
  PIPES
  ------------------
  today:number=Date.now();
  currency:number=250;


   {{today | date}}
   {{today | date: "fulldate"}}
   {{today | date: "hh:mm:ss"}}
   {{currency | currency}}
   {{currency | currency: "USD"}}
   {{currency | currency:"EUR"}}
   {{currency | percent}}
--------------------------------------------------------
custom pipes
---------------------------------------

1. ng generate pipe folder/pipename

2. sometitle:sring="firstText"

3.{{firstText | append:"SecondText"}}

4.
export class Append2Pipe implements PipeTransform {

  transform(value: string, anyname:string): string {
    return value+anyname;
  }

}

5. output=  firstTextSecondText

-----------------------------------------------------------------------------------------
Dependency Injection
-----------------------------------------------------------
npx ng generate service folder/serviceName
npx ng g s services/message

to add the services to all 
add in providers[] of 
app.module.ts 

or in that componant-
app.componant.ts
@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  standalone: false,
  styleUrl: './app.component.scss',
  providers:[MessageService]
})

1.we create service -message service
2.we create function in message service
3.to use the service in other componant 
4.so we make it as object and we use, this is DependencyInjection
5.***constructor are used to instantiate any object of the class***
6. we can use the service in  constructor, function , of lifecyclehook(ngoninit)

example

service
-------------
export class MessageService {

  constructor() { }

  getmessage(){
    return ["msg1","msg2"]
  }
}
--------------------------
app componant
-------
 messages:string[]=[];

  constructor(private messageService:MessageService){ <---- injecting the service
    this.messages=this.messageService.getmessage()    <---- using the service

  }

--------------------------------------------------------
{{messages}}
output: msg1 msg2
-----------------------------------------------------------------------------------
HTTP CLIENT AND api
---------------------------------------------------------------------------------
provideHttpClient
---------------------------------------
add this  in app .module.ts
import { provideHttpClient } from '@angular/common/http';
providers: [MessageService,provideHttpClient()],


--------------------------------------------------------
export class MessageService {
  api: string = 'https://jsonplaceholder.typicode.com/posts';

  constructor(private http: HttpClient) {}

  getPost(): Observable<any[]> {
    return this.http.get<any[]>(this.api);
  }
}
--------------------------------------------------------------

  posts:any[]=[];

  constructor(private messageService:MessageService){
    this.messages=this.messageService.getmessage()

  }
ngOnInit(): void {
  this.messageService.getPost().subscribe(res=>{
    this.posts=res;
  })

}
----------------------------------------------------------
typecheck is the datatype we create ourself
Interface


Interface folder/InterfaceName.Interface.ts

create the interface according to the api data

export Interface Post{
    userId:string;
    id:number;
    title:string;
    body:string;
}

use it in services and datatypes

 posts:Post[]=[];

  getPost(): Observable<Post[]> {
    return this.http.get<Post[]>(this.api);
  }
  -------------------------------------------------------------

  json data:{
  "languages":[
    "abc",
    "bcd",
    "cdf"
  ]
  }
    getPost(): Observable<Array<Strings> {
    return this.http.get<Array<string>>(this.api);
  }

----------------------------------------------------------------------------------------------
FORMS-
1.template-driven
2. Reactive

import FormsModule in app.module.ts

in componant import the datatype
import {ngForm}


in componant

User:{name:string,email:string}={
  name=""
  email=""
}

html======>

<form #userForm="ngForm">
<input type="text" name="name" placeholder="name"></input>
<input type="text" name="email" placeholder="email"></input>
<button> submit</button>
</form>

--------------------------------------------------------------------------
Reactive Forms

import {FormsModule,ReactiveFormsModule}  in app.module.ts
also add referece in imports


import FormBuilder,formGroup ,validators in componant


in app.componant.ts
import { EventEmitter } from 'stream'

 userForm!:FormGroup;
  constructor(private formBuilder:FormBuilder){
  
    this.userForm=this.formBuilder.group({
      Name:['',Validators.required],
      Email:['',Validators.email]
    })

  }
  Submit(){
    if(this.userForm.valid){
      console.log(this.userForm.value)
    }
  }

  Html=====>
  <form [formGroup]="userForm" (ngSubmit)="Submit()">
<input type="text"  name="Name" formControlName="Name" >
<input type="text" name="Email" formControlName="Email">
<button> submit</button>
</form>
----------------------------------------------------------------
componant communication---- @input @delete EventEmitter
----------------------------------------------------------------
ng generate component folder/comp name

ng g c folder/comp

after creating add the component manually
to the app.module.ts
 in import and declarations

----------------------------------------------------------------------
Parent -To -Child;
-------
export class AppComponent {
  title = 'Secondapp';

  tasks:string[]=["task1","task2","task3"] <------parent has data
}
----------------------------------------------------------------
{{title}}
<app-task *ngFor="let t of tasks" [task]="t">  <----- 1. can pass to child like this
</app-task>  
-----------------------------------------------------------------

Child
---------
export class TaskComponent {
  @Input() task:string="";                      <---- 2. the passed data is recieved by child here
}
---------------------------------------
{{task}}                                         <--- 3. rendered
<button>Delete</button>                           
<br>


------------------------------------------------------------------------------------------------
****child to parent
----------------------
export class TaskComponent {
  @Input() task:string="";
  @Output() taskDeleted=new EventEmitter<void>();


  onDeleteclick():void{
    this.taskDeleted.emit();
  }

}
-----------------------------
HTML

{{task}}
<button (click)="onDeleteclick()">Delete</button>
<br>
--------------------------------------------------------
parent 

export class AppComponent {
  title = 'Secondapp';

  tasks:string[]=["task1","task2","task3"]

  deleteTask(task:string){
this.tasks=this.tasks.filter((t)=>t!==task)

  }
}
---------------------------------------
html
{{title}}
<app-task *ngFor="let t of tasks" [task]="t" (taskDeleted)="deleteTask(t)"></app-task>


--------------------------------------------------------------------------------------------

CRUD APP -

ng g c Componants/note-form,note-list

ng g s Services/note

ng g i Interfaces/note


app.module.ts
imports
formModule
provideHttpClientmodule
reacticeform module

imports

also

provider-note service

------------------------------------------------------------

Routers and navigation

---------------------------------------

const routes: Routes = [
  { path: '', redirectTo: 'notes', pathMatch: 'full' },
  {path:'notes/:id',component:NoteComponent},
  {path:'notes',component:NotesComponent}
];

<nav>
    <a routerLink="notes">Home</a><br>
    <a [routerLink]="['/notes','123']">123</a><br>
    <a [routerLink]="['/notes','124']">124</a><br>
    <a routerLink="notes">Home</a>

</nav>
<router-outlet />
--------------------------------------------------------------------------

so this displays the dynamic routes in the url link 

so display in componant we use Activated Routes
-------------------------------------------------------------------------

import{ActivatedRoute}

export class NoteComponent implements OnInit {
  noteId!:string|null;
  constructor(private route:ActivatedRoute){}
  
  ngOnInit(): void {
    this.route.paramMap.subscribe((p)=>{
      this.noteId=p.get('id')  <------{path:'notes/:id',component:NoteComponent} :id
    })

  }

  <p>{{noteId}}</p>

  ------------------------------------------------------

  now through Typescript function

   <button (click)="gotoone()">123</button>
    <button (click)="gototwo(124)">124</button>


      gotoone(){
    this.Routes.navigate(['/notes'])

  }
  gototwo(id:number){
    this.Routes.navigate(['/notes','124'])

  }

  -------------------------------------------------
  {path:"**" , title:"Unkown" Component:NotfoundCOmponant}

  for the unknow routes
  ---------------------------------------------------------

nested Routes

{path:'about',Component:AboutComponat,children:[
  {path:'profile',Component:ProfileComp}
  {path:'setting',Component:settingComp}
]}

in ABout Component.Html

<li>
<a routerLink="/about/profile">Profile</a>
or
<a [routerLink]="['profile']"


<a routerLink="/about/setting">Profile</a>
or
<a [routerLink]="['settings']"


//query params

<a routerLink="/about/setting" [queryParams]="{id:123}">Profile</a>

</li>
<router-outlet></router-outlet>

----------------------------------------
export class NoteComponent implements OnInit {
  noteId!:string|null;
  constructor(private route:ActivatedRoute){}
  
  ngOnInit(): void {
    this.route.queryParams.subscribe((p)=>{
      const id=params['id']
    })

  }

  <p>{{noteId}}</p>
-------------------------------------------------------------------------------------------------

